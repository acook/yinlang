grammar YinlangTreetop

  rule expression
    number space operation {
      def head
        number.value
      end

      def tail
        operation.value
      end

      def operator
        operation.operator.value
      end

      def secondary
        tail.first
      end

      def value
        binding.pry if tail.empty? || tail.first.is_a?(Array)

        tail.inject(head) do |memo, num|
          memo.send operator, num
        end
      end
    }
  end

  rule op_chain
    space link:(operation / args) {
      def value
        link.value
      end
    }
  end

  rule args
    number following:(space args)? {
      def value
        if !defined?(following) || following.empty? then
          Array(number.value)
        else
          following.args.value.unshift number.value
        end
      end
    }
  end

  rule operation
    operator space args? {
      def tail

        if contents.length > 1 && !contents.last.empty? then
          arglist = contents.last.args

          begin
            arglist.value
          rescue NoMethodError => error
            arglist.elements.inject(Array.new) do |memo, arg|
              memo << arg.value
            end
          end

        else
          Array.new
        end

      rescue => error
        binding.pry
      end

      def head
        contents.first.value
      end

      def value
        Array(head) + tail
      end

      def contents
        get_args.elements
      end

      def get_args
        elements.last
      end
    }
  end

  rule number
    [\d]+ {
      def value
        text_value.to_i
      end
    }
  end

  rule operator
    [-+] {
      def value
        text_value.to_sym
      end
    }
  end

  rule space
    ' '
  end

end
