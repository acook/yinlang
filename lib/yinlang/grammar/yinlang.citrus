grammar YinlangGrammar

  rule expression
    (primary:(number) operator term:(chain | expression | number)) {
      def head
        primary.value
      end

      def secondary
        tail.first
      end

      def tail
        Array(term.value)
      end

      def value
        tail.inject(head) do |result, num|
          result.send op, num
        end
      end

      def parameters
        Array(tail).unshift head
      end

      def op
        operator.value
      end
    }
  end

  rule operator
    (space op:('+' | '-') space?) {
      strip.to_sym
    }
  end

  rule number
    ([0-9]+) {
      to_i
    }
  end

  rule chain
    (number link+) {
      split(' ').map{|n| n.to_i}
    }
  end

  rule link
    (space number) {
      to_i
    }
  end

  rule space
    [ \t]+
  end

end
